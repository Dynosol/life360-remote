[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.poetry]
name = "life360-remote"
version = "1.0.0"
description = "Remote controller for Life360 via iOS app"
authors = ["Sol Kim"]
readme = "README.md"
packages = [{include = "src"}]

[tool.poetry.dependencies]
python = "^3.10"
annotated-types = "^0.7.0"
anyio = "^4.11.0"
certifi = "^2025.10.5"
charset-normalizer = "^3.4.4"
click = "^8.3.0"
fastapi = "^0.119.1"
h11 = "^0.16.0"
httpcore = "^1.0.9"
httptools = "^0.7.1"
httpx = "^0.28.1"
idna = "^3.11"
markdown-it-py = "^4.0.0"
mdurl = "^0.1.2"
pydantic = "^2.12.3"
pydantic-core = "^2.41.4"
Pygments = "^2.19.2"
python-dotenv = "^1.1.1"
PyYAML = "^6.0.3"
requests = "^2.32.5"
rich = "^14.2.0"
sniffio = "^1.3.1"
starlette = "^0.48.0"
typing-inspection = "^0.4.2"
typing-extensions = "^4.15.0"
urllib3 = "^2.5.0"
uvicorn = {extras = ["standard"], version = "^0.38.0"}
uvloop = "^0.22.1"
watchfiles = "^1.1.1"
websockets = "^15.0.1"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.0"
pytest-asyncio = "^0.21.0"
pytest-cov = "^4.1.0"
black = "^23.0.0"
ruff = "^0.1.0"
mypy = "^1.5.0"

[tool.poetry.scripts]
life360-remote = "src.cli:main"
life360-server = "main:main"

[project]
name = "life360-remote"
version = "1.0.0"
description = "Remote controller for Life360 via iOS app and FastAPI server"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "Sol Kim"}
]
keywords = ["life360", "api", "reverse-engineering", "fastapi", "websocket", "ios"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Framework :: FastAPI",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    "annotated-types>=0.7.0",
    "anyio>=4.11.0",
    "certifi>=2025.10.5",
    "charset-normalizer>=3.4.4",
    "click>=8.3.0",
    "fastapi>=0.119.1",
    "h11>=0.16.0",
    "httpcore>=1.0.9",
    "httptools>=0.7.1",
    "httpx>=0.28.1",
    "idna>=3.11",
    "markdown-it-py>=4.0.0",
    "mdurl>=0.1.2",
    "pydantic>=2.12.3",
    "pydantic-core>=2.41.4",
    "Pygments>=2.19.2",
    "python-dotenv>=1.1.1",
    "PyYAML>=6.0.3",
    "requests>=2.32.5",
    "rich>=14.2.0",
    "sniffio>=1.3.1",
    "starlette>=0.48.0",
    "typing-inspection>=0.4.2",
    "typing-extensions>=4.15.0",
    "urllib3>=2.5.0",
    "uvicorn[standard]>=0.38.0",
    "uvloop>=0.22.1",
    "watchfiles>=1.1.1",
    "websockets>=15.0.1",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "httpx>=0.28.1",  # For testing
]

[project.urls]
Homepage = "https://github.com/Dynosol/life360-remote"
Repository = "https://github.com/Dynosol/life360-remote"
Issues = "https://github.com/Dynosol/life360-remote/issues"

[project.scripts]
life360-remote = "src.cli:main"
life360-server = "main:main"

[tool.setuptools]
packages = ["src"]

[tool.setuptools.package-data]
src = ["py.typed"]

# Ruff configuration for linting
[tool.ruff]
line-length = 100
target-version = "py310"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by formatter)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

# Black configuration for formatting
[tool.black]
line-length = 100
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# MyPy configuration for type checking
[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
follow_imports = "normal"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true

# Pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/site-packages/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]

